Bird_1 - is really Bird_0

https://www.pgnmentor.com/files.html

How do we label empty squares?
    we could do with a label class (tightly coupled with chess.Piece)
    Can we prove that it's much harder to detect empty squares?  paried t-tests?

Are we flipping the board correctly?

Idea: send a whole board image as well as a square to detect colour of that square.
    It may be hard to tell the colour of a piece without reference to other pieces and 
    squares on the board due to lighting differences.

REMOVE MOVE 35 IN KASPAROV VS MURRAY
AND 77

TODO:
 - Visualise CNN layers
 - Calculate top-n accuracy
 - Compare freezing layers in transfer learning

Idea:  Use heatmap solution as an autolabeller to train a segmentation neural net

Report:
 - add abbreviations like FEN
 - describe tables and figures
 - test hue and brightness together
 - find extreme examples
 - are kings and queens hard to compare?? like previous work said

 
Saturday:
    - All games and Trails recorded

Sunday:
    - All figures done (more experiments with model)
    - Resnet ViTs ect done / more metrics work done

Monday:
    - All figures backed up
    - all metrics stuff done
    - Discussions largely complete

Tuesday:
    - read over and list changes to be made 
    - fill out bits that need filling out
    - self appraisal and conclusion

Wednesday:
    - prioritize work
    - good flow, solid argument throughout
    - summary
    
 
Realworld:
https://matijapiskorec.github.io/static/pdf/Computer%20vision%20system%20for%20the%20chess%20game%20reconstruction.pdf
http://vision.fe.uni-lj.si/cvww2016/proceedings/papers/21.pdf
https://web.stanford.edu/class/cs231a/prev_projects_2016/CS_231A_Final_Report.pdf
http://danielbowers.com/robot-chess-computer-vision/
https://cvgl.stanford.edu/teaching/cs231a_winter1415/prev/projects/chess.pdf
https://tech.bakkenbaeck.com/post/chessvision
https://is.muni.cz/th/meean/Master_Thesis.pdf
https://arxiv.org/pdf/1708.03898.pdf
https://www.researchgate.net/publication/331017060_Robust_Computer_Vision_Chess_Analysis_and_Interaction_with_a_Humanoid_Robot/fulltext/5c616ecba6fdccb608b8a2c5/Robust-Computer-Vision-Chess-Analysis-and-Interaction-with-a-Humanoid-Robot.pdf?origin=publication_detail
https://core.ac.uk/download/pdf/158326124.pdf
https://towardsdatascience.com/board-game-image-recognition-using-neural-networks-116fc876dafa
https://raw.githubusercontent.com/SukritGupta17/Chess-Board-Recognition/master/chess_recognition_project_report.pdf
https://www.researchgate.net/profile/Nandan-Banerjee/publication/323812986_A_Simple_Autonomous_Chess_Playing_Robot_for_playing_Chess_against_any_opponent_in_Real_Time/links/5aac378d0f7e9b4897bc94a7/A-Simple-Autonomous-Chess-Playing-Robot-for-playing-Chess-against-any-opponent-in-Real-Time.pdf?origin=publication_detail
https://bibliotecadigital.ipb.pt/bitstream/10198/1898/1/283-goncalves.pdf
https://www.raspberryturk.com/
https://stanford.edu/class/ee368/Project_Spring_1415/Reports/Danner_Kafafy.pdf

Related:
https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=615573
https://europepmc.org/article/PMC/PMC3264465
camera calibration (uses line and corner detection https://www.researchgate.net/profile/Arturo-De-La-Escalera/publication/221796095_Automatic_Chessboard_Detection_for_Intrinsic_and_Extrinsic_Camera_Parameter_Calibration/links/00b4951710215b0674000000/Automatic-Chessboard-Detection-for-Intrinsic-and-Extrinsic-Camera-Parameter-Calibration.pdf?origin=publication_detail
http://www.bmva.org/bmvc/1988/avc-88-023.pdf
https://arxiv.org/pdf/1301.5491.pdf

Board Detection:
https://arxiv.org/pdf/1301.5491.pdf

Online:
https://github.com/kochsebastian/ChessVisionBot


Joe
---
Background research: 
    section on each component - containing a paragraph on a couple of implementation each

Related Works:
    paragraph on a few implementations (3)
    previous work at university
    datasets
    previous work by author


Methods
    System architecture
    Paragraph / diagram on each problem
    experiment design
    for each problem:
        couple paragraphs on each component
        some pseudo code
        screenshots
    
Evaluation
    actually compare against other solutions
    analyse speed (fps)
    a few manual experiments and record how well they do
    video demonstartion


https://matijapiskorec.github.io/static/pdf/Computer%20vision%20system%20for%20the%20chess%20game%20reconstruction.pdf
---
Intro:
    Hard problem, some previous work
    Uses multiple camera angles
    Used custom board (green and red squares make color detection easier)
    Does not use chess rules

Methods:
    Tools used
    Architecture Diagram and high level description
    why some of these choices were made (occasional data to back this up)

Evaluation:
    some example test cases on unseen moves
    accuracy
    explanation of these results


http://vision.fe.uni-lj.si/cvww2016/proceedings/papers/21.pdf [Koray2016ACV]
---
Intro:
    Make reference to some chess playing robots and vision systems (summarising overall strategy)
    Equipment and setup

Methods:
    Overall architecture
        used detectCheckboardPoints of MATLAB
        uses high contrast and average colour
        do not leverage chess engine
    No piece detection
    Only color difference of square detection and assumed board starting position to calculate board state.
    
Evaluation:
    3 games played at varying light


https://web.stanford.edu/class/cs231a/prev_projects_2016/CS_231A_Final_Report.pdf
---
Intro:
    Very clear as to what is being added opposed to other methods in abstract
    Motivate the need
    Previous techniques for board recognition and piece recognition
        (chessboard detection can't deal with pieces on board)
        (line based techniques prove better)

        (color segmentation based techniques and shape detectors end up needing custom board (see 1))

Methods:
    Use another method (manual for board detection!!) so as to focus on piece detection
    336 samples with breakdown of dataset size by label (problem as they couldn't find a public avaibable one)
    Feature extraction with SIFT and HOG and then training SVMs
    Manual extracts color from square and compares it against known color of the squares

Evaluation:
    Occupancy and color detection near perfect accuracy
    Used 30 static board images for evaluation
    Metrics (detection accuracy, classification accuracy and cross entropy)
        formulas defined
    Demonstration of output
    Talks about finding optimal hyperparameters
    Full table of parameters and final confusion matrix
    MENTIONS THE MAIN FOCUS OF FUTURE RESEARCH SHOULD BE IN COLLECTING MORE DATA


http://danielbowers.com/robot-chess-computer-vision/
---
Intro:
    Built arm to play chess

Methods:
    Used chessboard calibration function
    Fixed camera position and moved it further away to reduce 'occlusion'
    Custom coloured pieces to detect with color mask segmentation

Evaluation:
    Very sensitive to lighting conditions and glossy peices


https://cvgl.stanford.edu/teaching/cs231a_winter1415/prev/projects/chess.pdf
---
Overfit to a side view. Requires human input for move detection.

Intro:
    Hough transform-based algorithm for board detection
    color detection for real time piece inference

    problems with current research:
        camera mounted directly above
        plain background
        multiple cameras

    valued minimal setup

Methods:
    needs empty board to detect
    manual inference
    Harris Corner Detector filtered with SIFT Descriptor Classifier trained on 3000 examples and clustered to prevent doubles with mean-shift clustering

    Uses k-means clustering to determine 4 board colours (white/black piece and white/black square)
    Hand craft algorithm to calculate the expected difference in colour from each possible move (requires an engine)
    Use cosine similarity to compare this expected difference with the actual difference to determine the move

Evaluation:
    Effected by lighting.  21 out of 25 cases in good lighting succeeded in board detection


https://www.comp.nus.edu.sg/~cs4243/showcase/chess_vision/Chess-Vision-Presentation.pdf
---
Intro:


Methods:
    Hough transform and corner point detection with outlier removal
    Maths of perspective transform
    Hardcoded threshold to determine piece color

    3d uses two perpendicular cameras

Evaluation:
    corner detection very unstable in real-time
    sensitive to change of lightings


https://towardsdatascience.com/board-game-image-recognition-using-neural-networks-116fc876dafa
---
Intro:
    Manually labelled data which took most of his time

Methods:
    Canny Edge detection and hough transform to generate chess lines
    CNN VGG to train on 13 classes (all)

Evaluation:
    confusion matrix
    demo (really struggled with occupancy)


https://raw.githubusercontent.com/SukritGupta17/Chess-Board-Recognition/master/chess_recognition_project_report.pdf
---
Intro:
    Aiming to work with multiple boards

Methods:
    Line and corner detection using hough transform
    projective transform
    Pretrained Alexnet for piece recognition
        pooling, relu, softmax and SGD with momentum
    700 images
    Segmented pieces with k-means clusters to find bounding boxes of pieces to send to the model

Evaluation:
    Ended up using overhead camera
    69% accuracy (not defined) on their own board
    67% accuracy on another board

https://arxiv.org/pdf/1708.03898.pdf
---
Intro:
    Not yet solved - outline use cases as to why it should be solved
    resistant to lighting conditions and angles 
    REALLY good overview of chessboard detection and their MAIN FOCUS
    States lack of datasets is an issue

Methods:
    Heatmap iterative generation 
    Each iteration consists of (line detection, lattice point detection, heatmap generation)

    Line
        preprocesses the images with 4 sets of parameters and then merges the result
        groups collinear lines into one straight line
        utilises https://sites.ualberta.ca/~dwiens/home%20page/pubs/asymptoticsofgmestimators.pdf for grouping

    Lattice Points
        direct sucessor of ChESS
        employs neural network as to determine if each sub image around each intersection is a lattice point

    Piece detection very similar to https://web.stanford.edu/class/cs231a/prev_projects_2016/CS_231A_Final_Report.pdf
    UTILISED knowledge from a chess engine to prune predictions

Evaluation:
    Use a couple of examples to compare aspects against other solutions (or own previous methods)
    Got 10 test images and compared against other solution (including execution time)
        explained how they chose those 10 test images (I could use them as well)
    Talked about the disadvantages (speed)


https://tech.bakkenbaeck.com/post/chessvision
---
Intro:
    auto labelling BUT records the indivdual squares (lossing information)

Methods:
    Used heatmap guys method
    Determine piece colour with thresholding
    Resnet for piece detection with 6 classes including empty
    merge king and queen class (expect human input)
    Used rules of chess to limit possibilities

Evaluation:
    Leveraged a FEN editor to fix mistakes


https://stanford.edu/class/ee368/Project_Spring_1415/Reports/Danner_Kafafy.pdf
---
Intro:
    Believes direct overhead view would make piece recognition impossible
    line detection for board as chess pieces yield many irrelevant corners
    recognising chess pieces are tricky because they don't have texture making SIFT ineffective

    Used a custom board with red and green squares to aid segmenting pieces with color
        tried with a normal board but found it ineffective

Methods:
    detect lines with Hough transform (pre processing with edge detection)
    Piece detection uses fourier descriptors

Evaluation:
    Ended up using 3 different methods to extract the contours for fourier descriptors


https://core.ac.uk/download/pdf/158326124.pdf
---
Intro:
    Robotics Arm

Method:
    Requires know board stating position and detects moves
    Piece detection uses reference colors (known board state)
    Modified the environment to use constant light

Evaluation:
    very dependant on light


https://bibliotecadigital.ipb.pt/bitstream/10198/1898/1/283-goncalves.pdf
---
Intro:
    Robot

Methods:
    chessboard detection - manual user selects corners
    color based (requires initial setup for reference colors)


https://www.researchgate.net/profile/Nandan-Banerjee/publication/323812986_A_Simple_Autonomous_Chess_Playing_Robot_for_playing_Chess_against_any_opponent_in_Real_Time/links/5aac378d0f7e9b4897bc94a7/A-Simple-Autonomous-Chess-Playing-Robot-for-playing-Chess-against-any-opponent-in-Real-Time.pdf?origin=publication_detail
---
Intro:
    Robot Arm

Methods:
    Used a green and red chessboard 
    Ensured lighting of the scene
    board detection
        manual "region of interest" selected to simplify board detection
        variation on Harris corner detection to find all squares
    Piece detection
        canny edge detection with a threshold value to determine piece occupancy
        color thresholding to determine piece color (aided by green and red board)
        board state is known and colour difference to calculate moves

Evaluation:
    lighting badly effected
    thresholding was not outso so failed during lighting changes


https://www.researchgate.net/publication/331017060_Robust_Computer_Vision_Chess_Analysis_and_Interaction_with_a_Humanoid_Robot/fulltext/5c616ecba6fdccb608b8a2c5/Robust-Computer-Vision-Chess-Analysis-and-Interaction-with-a-Humanoid-Robot.pdf?origin=publication_detail
---
Intro:
    Robot (Baxter)
    more reliable in varying light conditions

Methods:
    Dynamic approach to Hough line transform
    Hybrid edge and morphology-based approach for occupancy detection
    camera is positioned at a 0.4 radian angle from the perpendicular to the table
    Otsu thresholding for dynamic lighting
    Canny edge detection to find the board
    ysteresis to produce more consistent edges than the Sobel or Prewitt operators

Evaluation:
    Still has some problems with lighting and doesn't detect piece type


https://is.muni.cz/th/meean/Master_Thesis.pdf
---
Intro:


Methods:
    Hough transformation for line detection
    Compared pieces to 3D models created in software
    Template matching
    Uses the rules of chess
    Uses knowledge of chessboard size to determine intrinsic and externsic camera parameters

Evaluation:
    158 seconds to determine one board state!